# Build used libraries
add_subdirectory(vendor/spdlog)
add_subdirectory(vendor/GLFW)
add_subdirectory(vendor/GLAD)
add_subdirectory(vendor/glm)

# ImGui doesn't provide a CMakeLists.txt, so we have to build it ourselves
add_library(ImGui
	"vendor/imgui/imgui.cpp"
	"vendor/imgui/imgui_draw.cpp"
	"vendor/imgui/imgui_widgets.cpp"
	"vendor/imgui/imgui_demo.cpp"
	"vendor/imgui/imgui_tables.cpp"
)

target_include_directories(ImGui PUBLIC
	"vendor/imgui"
)

# Build Quark
add_subdirectory(src)

target_link_libraries(Quark PUBLIC 
	ImGui
)

function(quark_add_shaders)
    set(oneValueArgs TARGET DESTINATION)
    set(multiValueArgs VERTEX FRAGMENT)
	cmake_parse_arguments(ARG "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

	set(HPP_FILE "${ARG_DESTINATION}/ShaderBinaries.hpp")
	set(CPP_FILE "${ARG_DESTINATION}/ShaderBinaries.cpp")
	file(WRITE ${HPP_FILE} 
"/**
 * This file was auto generated by Quark. 
 *
 * ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON RECONFIGURATION.
 *
 * If you want to change the contents of this file, edit the arguments 
 * passed to quark_add_shaders in your build script.
 */

#pragma once
#include \"Quark/Utility/ShaderBinaryStructs.hpp\"
	
struct ${ARG_TARGET}VertexShaders {
")

	file(WRITE ${CPP_FILE} 
"/**
 * This file was auto generated by Quark. 
 *
 * ANY MODIFICATIONS TO THIS FILE WILL BE LOST UPON RECONFIGURATION.
 *
 * If you want to change the contents of this file, edit the arguments 
 * passed to quark_add_shaders in your build script.
 */

#include \"ShaderBinaries.hpp\"

")

	foreach(VERTEX_FILE_NAME ${ARG_VERTEX})
		file(REAL_PATH ${VERTEX_FILE_NAME} VERTEX_FILE)
		set(vertexFileName "")
		get_filename_component(vertexFileName ${VERTEX_FILE} NAME_WLE)

		file(APPEND ${HPP_FILE} "\tstatic const Quark::Photon::VertexShaderBinary ${vertexFileName};\n")

		file(READ ${VERTEX_FILE_NAME} VERTEX_FILE_CONTENT)
		file(APPEND ${CPP_FILE} "const Quark::Photon::VertexShaderBinary ${ARG_TARGET}VertexShaders::${vertexFileName} = {R\"(${VERTEX_FILE_CONTENT})\"};\n")
	endforeach()

	file(APPEND ${HPP_FILE} "};\n\nstruct ${ARG_TARGET}FragmentShaders {\n")
	file(APPEND ${CPP_FILE} "\n")

	foreach(FRAGMENT_FILE_NAME ${ARG_FRAGMENT})
		file(REAL_PATH ${FRAGMENT_FILE_NAME} FRAGMENT_FILE)
		set(fragmentFileName "")
		get_filename_component(fragmentFileName ${FRAGMENT_FILE} NAME_WLE)

		file(APPEND ${HPP_FILE} "\tstatic const Quark::Photon::FragmentShaderBinary ${fragmentFileName};\n")

		file(READ ${FRAGMENT_FILE_NAME} FRAGMENT_FILE_CONTENT)
		file(APPEND ${CPP_FILE} "const Quark::Photon::FragmentShaderBinary ${ARG_TARGET}FragmentShaders::${fragmentFileName} = {R\"(${FRAGMENT_FILE_CONTENT})\"};\n")
	endforeach()

	file(APPEND ${HPP_FILE} "};")

	target_sources(${ARG_TARGET} PUBLIC ${CPP_FILE})

endfunction()